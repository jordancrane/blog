<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@Jordan Craneâ€™s Blog - Microposts</title>
    <link>https://blog.jordancrane.me/microposts/</link>
    <description>All entries in Microposts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    <lastBuildDate>Sun, 19 Jul 2020 18:10:21 -0700</lastBuildDate>
    <atom:link href="https://blog.jordancrane.me/microposts/" rel="self" type="application/rss+xml" />
    
      
      <item>
      	
        <link>https://blog.jordancrane.me/microposts/2020-07-20t011021&#43;0000/</link>
        <pubDate>Sun, 19 Jul 2020 18:10:21 -0700</pubDate>
        <author>Jordan Crane</author>
        <guid>https://blog.jordancrane.me/microposts/2020-07-20t011021&#43;0000/</guid>
        <description>&lt;p&gt;This is my first micropost!&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
      	
        <link>https://blog.jordancrane.me/posts/proximity-chat/</link>
        <pubDate>Fri, 03 Jul 2020 20:44:28 -0700</pubDate>
        <author>Jordan Crane</author>
        <guid>https://blog.jordancrane.me/posts/proximity-chat/</guid>
        <description>&lt;p&gt;Although I&amp;rsquo;m currently unemployed thanks to the global pandemic, the transition to remote work in my previous position brought about many changes to the way my team and I worked; some good, some bad. While I enjoyed the ability to work uninterrupted during periods of flow, I missed the spontaneous exchanges that were prone to happen in an office space but failed to materialize in the remote world. This was somewhat mitigated by the fact that my teammates and I were already close, but it still felt hindered. In the process of searching for new employment, I&amp;rsquo;ve been attracted to remote positions due to their perks, but I&amp;rsquo;ve also found my mind being drawn to thoughts of how it might be more difficult to form those initial relationships in a fully remote environment. Today I want to explore how a company might foster serendipitous encounters in a remote workspace.&lt;/p&gt;
&lt;h2 id=&#34;things-we-tried&#34;&gt;Things We Tried&lt;/h2&gt;
&lt;p&gt;My team at Acorns explored a few different ways to maintain our culture of collaboration given the tools we had at our disposal; namely Google Meet and Slack.&lt;/p&gt;
&lt;h3 id=&#34;watercooler-channel&#34;&gt;Watercooler Channel&lt;/h3&gt;
&lt;p&gt;One thing we tried was having a private team watercooler channel for casual discussion. This was helpful in replicating the feeling of spinning your chair around to talk to one another about what we did over the weekend and other non-work-related things. However, it was unable to fully capture the feeling of doing so, since text chat lacks the feeling of personal connection that an actual conversation creates.&lt;/p&gt;
&lt;h3 id=&#34;video-call-activities&#34;&gt;Video Call Activities&lt;/h3&gt;
&lt;p&gt;Another tool we used was engaging in social activities over video call. Our team particularly liked playing Smash Bros together, so we would often hop on a call and play a few rounds together at the end of the day. This was great for maintaining a feeling of camaraderie, and providing a venue for informal discussion about the events of the day, but obviously lacked the spontaneity of sitting down at the same table for lunch, for example. Our office as a whole also tried a few virtual happy hours, and while these were enjoyable, the problem with gatherings larger than 3-5 people on a video call is the feeling of passing a talking stick around a circle. When someone is speaking they inherently become the center of attention, and this often hinders the natural flow of conversation since side conversations can&amp;rsquo;t split off.&lt;/p&gt;
&lt;h3 id=&#34;persistent-video-hangout&#34;&gt;Persistent Video Hangout&lt;/h3&gt;
&lt;p&gt;The last technique we used was to have a persistent video chat available to hop in and out of at will. This allowed Slack conversations to organically evolve into real-time conversations as the complexity increased, and also provided a venue for the team to be in a virtual space without an express purpose. That last idea is an important one, since most video calls have a set topic, and once you&amp;rsquo;re done talking about it the call is over. This, however, also had downsides. Being in the persistent chat meant that you got distracted more often, and as soon as two people were having a conversation in the hangout it was no longer a viable space to hang around in for the rest of the team. The latter issue harks back to the fact that side conversations aren&amp;rsquo;t possible in current video call solutions, so everyone in the call always has to be onboard with what is happening in the call.&lt;/p&gt;
&lt;h2 id=&#34;how-can-we-do-better&#34;&gt;How Can We Do Better?&lt;/h2&gt;
&lt;p&gt;The concept being pursued in all of the attempts in the previous section is that of a virtual space to supplant the physical space provided by an office. The space acts as a medium to facilitate collaboration and camaraderie, since the space allows individuals to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See when someone is available for collaboration&lt;/li&gt;
&lt;li&gt;Encounter people they don&amp;rsquo;t work with directly&lt;/li&gt;
&lt;li&gt;Have conversations about non-work-related topics&lt;/li&gt;
&lt;li&gt;Be together even when they are working alone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus the question is how can current collaboration tools be modified to provide such a space. It can be broken down into lists of desirable and undesirable features/traits of the space.&lt;/p&gt;
&lt;h3 id=&#34;desirable&#34;&gt;Desirable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Facilitates turning asynchronous conversations into real-time conversations when it becomes apparent that pairing or explaining something on a call would be more effective&lt;/li&gt;
&lt;li&gt;Allows side conversations to spin off organically while maintaining the feeling of being in the same space (creating a separate call doesn&amp;rsquo;t achieve this well, since swapping between the side conversation and the hub conversation doesn&amp;rsquo;t feel cohesive)&lt;/li&gt;
&lt;li&gt;Shows when someone is open to a conversation or looking to not be distracted (virtual equivalent of headphones on/headphones off)&lt;/li&gt;
&lt;li&gt;Allows for serendipitous encounters to occur&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;undesirable&#34;&gt;Undesirable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Space becomes hard to use when a side conversation is happening, or when there are more than a small number of people in the space&lt;/li&gt;
&lt;li&gt;Inhabitants of the space get distracted when they want to be focused&lt;/li&gt;
&lt;li&gt;Space creates a sense of &amp;ldquo;I&amp;rsquo;m here so we need to be talking about something&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;potential-solutions&#34;&gt;Potential Solutions&lt;/h2&gt;
&lt;p&gt;The thought that continually came to me as I was in virtual happy hours or persistent hangouts was that of being able to move closer or further away from other inhabitants of the space we were using, depending on who I was trying to have a conversation with, or what I was trying to get out of the space. At a real happy hour you can swap seats if you are interested in a conversation on the other end of the table, or lean to the left or right to join different threads of discussion. In a real office you can wheel your chair over to your coworker&amp;rsquo;s desk to pair on a problem, or to talk about a movie you saw recently. It seems to me that replicating this ability in a virtual space is key to making it feel more like a physical space. This spawned two distinct possibilities in my mind for solutions, either a proximity-based video chat service that allows you move between conversations, or a system consisting of a lobby and rooms that allows an inhabitant to see who is in each &amp;ldquo;room&amp;rdquo; (like seeing who is sitting at each table in a break room). Another nice feature would be the ability to &amp;ldquo;overhear&amp;rdquo; conversations happening in an adjacent &amp;ldquo;room&amp;rdquo;, or somewhere nearby in the proximity-based solution. The proximity-based solution, while harder to implement, would be the most similar to a physical space.&lt;/p&gt;
&lt;p&gt;While I was in the midst of considering these possibilities I came across &lt;a href=&#34;https://gather.town&#34;&gt;Gather&lt;/a&gt;, which seems to be the only product that is breaking the mold of traditional video calls in this way. Gather allows you to create an 8-bit virtual space, which inhabitants can move their avatars around like a video game. As you get close to another inhabitant&amp;rsquo;s avatar, a video call is created between the two of you. It&amp;rsquo;s unfortunate that I was already without a job by the time I came across the site, since as soon as I saw it I was excited by the possibilities that it could enable.&lt;/p&gt;
&lt;p&gt;Using Gather or a similar product, a team could create a virtual office, which contains virtual desks, virtual meeting rooms, and virtual common areas. Inhabitants could be at their desk while they are working alone, but also walk over to the virtual desk of a coworker, or run into someone in the hallway on the way to a virtual meeting room. If a conversation was happening in a common area, others could drop in or side conversations could split off organically, as they do in the real world. Such a setup could provide many of the benefits of working in an office, without sacrificing the benefits of remote work. My main concern with such a solution is the problem of surveillance, it could easily become another way to keep tabs on workers and penalize them for not being in the virtual office on time. However, it would still be a very interesting technology to experiment with in a time when so many companies are undergoing jarring transitions to a fully-distributed workforce.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Getting to the end of this post I&amp;rsquo;m not 100% sure that I had a concrete point to make, other than that Slack and Zoom (and their contemporaries) don&amp;rsquo;t have to be the be-all and end-all of remote work. There are still ways to push the boundaries and experiment with other modes of remote collaboration. I hope this inspires you to continue searching for ways to foster better ways of working with your remote teams.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
      	
        <link>https://blog.jordancrane.me/posts/this-site/</link>
        <pubDate>Tue, 30 Jun 2020 19:15:15 -0700</pubDate>
        <author>Jordan Crane</author>
        <guid>https://blog.jordancrane.me/posts/this-site/</guid>
        <description>&lt;p&gt;I started this site with the original purpose of hosting my resume for easy sharing without much else in mind. That&amp;rsquo;s still mostly all it does, but I&amp;rsquo;ve solved a few problems along the way to make deployments (slightly) cleaner, so I thought I would document my process here.&lt;/p&gt;
&lt;p&gt;I keep my resume in version control in a markdown file, and then use the fabulous &lt;a href=&#34;https://pandoc.org/&#34;&gt;Pandoc&lt;/a&gt; to convert it to a variety of formats, namely an HTML file for hosting and a PDF file for sharing over email. The code can be found &lt;a href=&#34;https://github.com/jordancrane/pandoc_resume&#34;&gt;here&lt;/a&gt;, which is forked from &lt;a href=&#34;https://github.com/mszep/pandoc_resume&#34;&gt;The Markdown Resume&lt;/a&gt;, which is based on &lt;a href=&#34;https://blog.chmd.fr/editing-a-cv-in-markdown-with-pandoc.html&#34;&gt;this&lt;/a&gt; blog post. So suffice it to say this is not my idea, but I love the approach and have tweaked it along the way to meet my needs. In order to get the generated files from my resume repository into my GitHub Pages &lt;a href=&#34;https://github.com/jordancrane/site&#34;&gt;site repository&lt;/a&gt;, I was originally using a submodule and simply generating the resume files as part of the deployment process. This had a few drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every time I changed my resume I had to redeploy the whole site.&lt;/li&gt;
&lt;li&gt;I use &lt;code&gt;docker-compose&lt;/code&gt; to build the resume, and Docker was attempting to use the same container to build it in the resume repository and in the site submodule. This meant I had to run &lt;code&gt;docker container rm&lt;/code&gt; every time I switched between updating the resume and deploying the site.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to mitigate these issues I decided to host the resume independently as its own GitHub pages project site, and simply link to it from this site. I could have just used the built-in GitHub Pages setup of the project site being a path under my user site, but I liked the idea of making it a subdomain more (&lt;code&gt;resume.jordancrane.me&lt;/code&gt; just looks more appealing than &lt;code&gt;jordancrane.me/pandoc_resume/&lt;/code&gt; to me, and I&amp;rsquo;m a sucker for details that literally no one else will notice). To deploy the generated files from my resume repository I opted to &lt;a href=&#34;https://gist.github.com/cobyism/4730490&#34;&gt;use a subtree&lt;/a&gt; due to the simplicity. This isn&amp;rsquo;t &lt;em&gt;ideal&lt;/em&gt; so I may revisit it in the future, but it works for now. Assuming that you already have your personal site configured with a custom domain (GitHub&amp;rsquo;s &lt;a href=&#34;https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site&#34;&gt;documentation&lt;/a&gt; on this is pretty good) adding a subdomain is pretty straightforward. All you need to do is configure a &lt;code&gt;CNAME&lt;/code&gt; file in the root of your deployment branch with your desired subdomain, mine looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;resume.jordancrane.me
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then you simply configure that as your project&amp;rsquo;s custom domain under the repository settings, and add a new CNAME record to your DNS provider that directs the subdomain host (&lt;code&gt;resume&lt;/code&gt;) to your GitHub Pages domain (&lt;code&gt;jordancrane.github.io.&lt;/code&gt;). This is pretty simple, and GitHub also documents this well, but I was initially confused by the fact that it doesn&amp;rsquo;t need to point directly to the project site.&lt;/p&gt;
&lt;p&gt;Now that I&amp;rsquo;ve configured this, I can deploy my resume individually directly from it&amp;rsquo;s repository, without deploying the entire site. Additionally I was able to remove the &lt;code&gt;docker-compose&lt;/code&gt; step from the build process for the site, so I no longer have to deal with container conflicts from building it in multiple places. I&amp;rsquo;m sure there are better ways still to do this, but I&amp;rsquo;d be lying if I said the small quality of life improvements brought by this change don&amp;rsquo;t bring me some joy. My next step is to move my deployment processes into GitHub Actions so I can get rid of my bad deploy scripts, but I&amp;rsquo;ll save that for another day.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
      	
        <link>https://blog.jordancrane.me/posts/super-special-terminal/</link>
        <pubDate>Sat, 06 Jun 2020 20:00:25 -0700</pubDate>
        <author>Jordan Crane</author>
        <guid>https://blog.jordancrane.me/posts/super-special-terminal/</guid>
        <description>&lt;p&gt;If you&amp;rsquo;re anything like me you are super particular about your terminal setup. I am capable of working in most terminal environments, but since I spend a lot more time using the setup on my personal computer than those on machines I SSH into, I figure it&amp;rsquo;s worth spoiling myself in that context, despite the fact that it might incur a slight efficiency penalty when I&amp;rsquo;m using machines without all the niceties that I like to add. Since I am now in the process of setting up my development environment once again, I figured I would take this opportunity to document all the things I do in a post so I don&amp;rsquo;t have to go through so much trial and error every time to remember how I like things.&lt;/p&gt;
&lt;h3 id=&#34;terminal&#34;&gt;Terminal&lt;/h3&gt;
&lt;p&gt;First things first, don&amp;rsquo;t even open Terminal. Get &lt;a href=&#34;https://www.iterm2.com&#34;&gt;iTerm&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;package-manager&#34;&gt;Package Manager&lt;/h3&gt;
&lt;p&gt;The next thing you&amp;rsquo;ll need is a package manager. I&amp;rsquo;ve tried &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;, but I found it to be confusing as someone who&amp;rsquo;s spent time with other package managers like &lt;code&gt;apt&lt;/code&gt; and &lt;code&gt;pacman&lt;/code&gt;. I&amp;rsquo;ve also run into issues when macOS updates are installed; sometimes the permissions of your &lt;code&gt;/usr/local&lt;/code&gt; directory get reset, and consequently your whole environment gets screwed up. The latter experience left me with a sour taste in my mouth and a compulsive desire to Dockerize everything, so now I&amp;rsquo;m using &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;. I found &lt;a href=&#34;https://saagarjha.com/blog/2019/04/26/thoughts-on-macos-package-managers/&#34;&gt;this post&lt;/a&gt; to be a well thought out comparison between the two, if you&amp;rsquo;re interested something more nuanced than my knee-jerk reaction.&lt;/p&gt;
&lt;h3 id=&#34;docker&#34;&gt;Docker&lt;/h3&gt;
&lt;p&gt;Not strictly a terminal thing, but something that&amp;rsquo;s important to my environment, due to the aforementioned compulsive Dockerization habit. I just install the &lt;a href=&#34;https://hub.docker.com/editions/community/docker-ce-desktop-mac/&#34;&gt;Docker For Mac&lt;/a&gt; app, not sure if that&amp;rsquo;s the best way to do it but it&amp;rsquo;s worked well for me so far.&lt;/p&gt;
&lt;h3 id=&#34;shell&#34;&gt;Shell&lt;/h3&gt;
&lt;p&gt;Once you&amp;rsquo;ve got iTerm and MacPorts setup, time to install your shell of choice (unless it&amp;rsquo;s &lt;code&gt;bash&lt;/code&gt;, which is fine I guess). Personally I&amp;rsquo;ve always been partial to &lt;code&gt;zsh&lt;/code&gt;, mostly because it&amp;rsquo;s what all my friends used in college (a nuanced decision making process, I know). Recently I&amp;rsquo;ve been considering checking out &lt;code&gt;fish&lt;/code&gt;, but I haven&amp;rsquo;t gotten around to it yet. To install &lt;code&gt;zsh&lt;/code&gt;, just run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo port install zsh zsh-completions
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A necessary companion to &lt;code&gt;zsh&lt;/code&gt; in my mind is &lt;a href=&#34;https://github.com/sorin-ionescu/prezto&#34;&gt;Prezto&lt;/a&gt;, which adds a ton of nice features like history substring search, mostly reasonable &lt;code&gt;git&lt;/code&gt; aliases, and &lt;code&gt;vim&lt;/code&gt; bindings for your prompt, among other things. It&amp;rsquo;s recommended that you fork the repo so you can store your personal configuration in GitHub. My fork is &lt;a href=&#34;https://github.com/jordancrane/prezto&#34;&gt;here&lt;/a&gt;; it&amp;rsquo;s pretty basic, just turning on a few colorization settings, adding some extra aliases, and tweaking my favorite prompt theme to have emoji (the most important change obviously).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve typically used a modified version of the &lt;code&gt;steeef&lt;/code&gt; prompt that comes with Prezto, but with this install I also discovered &lt;a href=&#34;https://starship.rs&#34;&gt;starship&lt;/a&gt;, which seems interesting. I&amp;rsquo;m unsure how much feature overlap it has with Prezto, so whether I continue using it or not remains yet to be seen.&lt;/p&gt;
&lt;h3 id=&#34;text-editor&#34;&gt;Text Editor&lt;/h3&gt;
&lt;p&gt;As far as I&amp;rsquo;m concerned Vim is the One True Text Editor, and I mostly refuse to use any application that doesn&amp;rsquo;t have a Vim bindings plugin. However, having gone way down the rabbit hole of Vim tweaking in the past, I will say that overall I prefer to use &lt;a href=&#34;https://neovim.io&#34;&gt;NeoVim&lt;/a&gt; since it tends to be easier to get plugins to work well with NeoVim without recompiling with a bunch of different variant flags. Install it with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo port install neovim
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alias vim=&#39;nvim&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to your &lt;code&gt;.zshrc&lt;/code&gt; for an easy transition. Two bindings I find important are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nnoremap j gj
nnoremap k gk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which allow you to move up and down wrapped lines (helpful for writing blog posts and whatnot without needing to add line breaks manually).&lt;/p&gt;
&lt;h3 id=&#34;font&#34;&gt;Font&lt;/h3&gt;
&lt;p&gt;I really enjoy &lt;a href=&#34;https://pcaro.es/p/hermit/&#34;&gt;Hermit&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;colorscheme&#34;&gt;Colorscheme&lt;/h3&gt;
&lt;p&gt;I like the Apprentice color scheme for both &lt;a href=&#34;https://github.com/romainl/Apprentice&#34;&gt;Vim&lt;/a&gt; and &lt;a href=&#34;https://github.com/romainl/apprentice-colorschemes&#34;&gt;iTerm&lt;/a&gt;. Do note that the background color for iTerm in that repo is a little off from that in the Vim one, change it to &lt;code&gt;#262626&lt;/code&gt; to avoid having a frame around your Vim window. For installing it to Vim, I use &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I think that&amp;rsquo;s about everything&amp;hellip; This will likely be a living document that I will modify as my preferences change.&lt;/p&gt;
</description>
      </item>
      
    
  </channel>
</rss>
